name: Setup Self-hosted Runner with Ngrok

on:
  push:
  workflow_dispatch:

jobs:
  setup:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive -Path ngrok.zip -DestinationPath ./

    - name: Authenticate with ngrok
      run: .\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
        if (-not $Env:RUNNERADMIN_PASSWORD) {
            throw "RUNNERADMIN_PASSWORD is not set"
        }
        
        $securePassword = ConvertTo-SecureString -AsPlainText $Env:RUNNERADMIN_PASSWORD -Force
        
        if (Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue) {
            Set-LocalUser -Name "runneradmin" -Password $securePassword
        } else {
            New-LocalUser -Name "runneradmin" -Password $securePassword -UserMayNotChangePassword -PasswordNeverExpires -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "runneradmin"
        }
      env:
        RUNNERADMIN_PASSWORD: ${{ secrets.RUNNERADMIN_PASSWORD }}

    - name: Download and install WinRAR
      run: |
        Invoke-WebRequest -Uri "https://www.win-rar.com/fileadmin/winrar-versions/winrar/winrar-x64-601.exe" -OutFile winrar-x64-601.exe
        Start-Process -FilePath .\winrar-x64-601.exe -ArgumentList "/S" -Wait
        Write-Output "WinRAR installation completed."

    - name: Create start-ngrok.ps1 script
      run: |
        $ngrokScript = @'
        # Start ngrok process as a background job
        $ngrokProcess = Start-Job -ScriptBlock {
            Start-Process .\ngrok.exe -ArgumentList "tcp 3389" -Wait
        }

        # Give ngrok some time to start
        Start-Sleep -Seconds 10

        # Initialize ngrok URL
        $ngrokUrl = ""

        # Try to fetch the ngrok public URL
        while ($true) {
            try {
                $tunnels = Invoke-RestMethod -Uri http://127.0.0.1:4040/api/tunnels
                if ($tunnels.tunnels) {
                    $ngrokUrl = $tunnels.tunnels[0].public_url
                    Write-Output "ngrok tunnel is available at: $ngrokUrl"
                    break
                }
            } catch {
                Write-Output "Waiting for ngrok to initialize..."
                Start-Sleep -Seconds 5
            }
        }

        if (-not $ngrokUrl) {
            Stop-Job -Id $ngrokProcess.Id -Force
            throw "Failed to create ngrok tunnel"
        }

        # Output the ngrok URL to a file
        Set-Content -Path ngrok-url.txt -Value $ngrokUrl

        # Monitor ngrok job to ensure it's running
        while ($true) {
            $jobState = (Get-Job -Id $ngrokProcess.Id).State
            if ($jobState -ne 'Running') {
                Write-Output "ngrok job has stopped, restarting..."
                $ngrokProcess = Start-Job -ScriptBlock {
                    Start-Process .\ngrok.exe -ArgumentList "tcp 3389" -Wait
                }
            }
            Start-Sleep -Seconds 300
        }
        '@

        Set-Content -Path start-ngrok.ps1 -Value $ngrokScript

    - name: Run start-ngrok.ps1 script
      run: pwsh -File ./start-ngrok.ps1
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Download GitHub Actions Runner
      run: |
        Invoke-WebRequest -Uri "https://github.com/actions/runner/releases/download/v2.301.1/actions-runner-win-x64-2.301.1.zip" -OutFile "actions-runner-win-x64-2.301.1.zip"
        Expand-Archive -Path "actions-runner-win-x64-2.301.1.zip" -DestinationPath "C:\actions-runner"

    - name: Configure Runner
      run: |
        C:\actions-runner\config.cmd --url https://github.com/<owner>/<repo> --token ${{ secrets.ACTIONS_RUNNER_TOKEN }} --name my-self-hosted-runner --work _work --replace
      env:
        ACTIONS_RUNNER_TOKEN: ${{ secrets.ACTIONS_RUNNER_TOKEN }}

    - name: Install Runner as a Service
      run: C:\actions-runner\svcinstall.cmd

    - name: Start Runner Service
      run: Start-Service actions.runner.<owner>.<repo>.my-self-hosted-runner

