name: CI

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Download ngrok
      run: curl -o ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip

    - name: Extract ngrok
      run: unzip ngrok.zip

    - name: Authenticate with ngrok
      run: ./ngrok authtoken $NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop (VNC)
      run: |
        sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -clientopts -setvnclegacy -vnclegacy yes -clientopts -setvncpw -vncpw $RUNNERADMIN_PASSWORD -restart -agent -privs -all
      env:
        RUNNERADMIN_PASSWORD: ${{ secrets.RUNNERADMIN_PASSWORD }}

    - name: Install Homebrew
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/runner/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
      
    - name: Install WinRAR (macOS alternative: Keka)
      run: |
        brew install --cask keka

    - name: Download Avica
      run: |
        curl -o ~/Downloads/Avica_setup.dmg https://download.avica.link/downloader/Avica_setup.dmg
        echo "Avica downloaded to ~/Downloads."

    - name: Download NetLimiter (no direct macOS alternative, perhaps use Little Snitch or TripMode)
      run: |
        curl -o ~/Downloads/littlesnitch.dmg https://www.obdev.at/downloads/littlesnitch/LittleSnitch-5.3.1.dmg
        echo "Little Snitch downloaded to ~/Downloads."

    - name: Download IDM (macOS alternative: Folx)
      run: |
        curl -o ~/Downloads/folx.dmg https://cdn.eltima.com/download/fm.dmg
        echo "Folx downloaded to ~/Downloads."

    - name: Open Finder in Downloads
      run: open ~/Downloads

    - name: Create start-ngrok.sh script
      run: |
        cat << 'EOF' > start-ngrok.sh
        #!/bin/bash
        # Start ngrok process
        ./ngrok tcp 5900 &
        NGROK_PID=$!
        sleep 10
        # Initialize ngrok URL
        NGROK_URL=""
        # Try to fetch the ngrok public URL
        while true; do
          TUNNELS=$(curl -s http://127.0.0.1:4040/api/tunnels)
          if [[ $TUNNELS == *"public_url"* ]]; then
            NGROK_URL=$(echo $TUNNELS | grep -o 'tcp://[^"]*')
            echo "ngrok tunnel is available at: $NGROK_URL"
            break
          else
            echo "Waiting for ngrok to initialize..."
            sleep 5
          fi
        done
        if [ -z "$NGROK_URL" ]; then
          kill $NGROK_PID
          echo "Failed to create ngrok tunnel"
          exit 1
        fi
        # Loop to keep the script running
        while true; do
          sleep 300
        done
        EOF
        chmod +x start-ngrok.sh

    - name: Run start-ngrok.sh script
      run: ./start-ngrok.sh
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
