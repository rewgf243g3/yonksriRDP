name: CI

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive -Path ngrok.zip -DestinationPath ./

    - name: Authenticate with ngrok
      run: .\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
        if (-not $Env:RUNNERADMIN_PASSWORD) {
            throw "RUNNERADMIN_PASSWORD is not set"
        }
        
        $securePassword = ConvertTo-SecureString -AsPlainText $Env:RUNNERADMIN_PASSWORD -Force
        
        if (Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue) {
            Set-LocalUser -Name "runneradmin" -Password $securePassword
        } else {
            New-LocalUser -Name "runneradmin" -Password $securePassword -UserMayNotChangePassword -PasswordNeverExpires -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "runneradmin"
        }
      env:
        RUNNERADMIN_PASSWORD: ${{ secrets.RUNNERADMIN_PASSWORD }}

    - name: Download and install WinRAR
      run: |
        Invoke-WebRequest -Uri "https://www.win-rar.com/fileadmin/winrar-versions/winrar/winrar-x64-601.exe" -OutFile winrar-x64-601.exe
        Start-Process -FilePath .\winrar-x64-601.exe -ArgumentList "/S" -Wait
        Write-Output "WinRAR installation completed."

    - name: Create start-ngrok.ps1 script
      run: |
        $ngrokScript = @'
        # Start ngrok process
        $ngrokProcess = Start-Process .\ngrok.exe -ArgumentList "tcp 3389" -PassThru

        # Give ngrok some time to start
        Start-Sleep -Seconds 10

        # Initialize ngrok URL
        $ngrokUrl = ""

        # Try to fetch the ngrok public URL
        while ($true) {
            try {
                $tunnels = Invoke-RestMethod -Uri http://127.0.0.1:4040/api/tunnels
                if ($tunnels.tunnels) {
                    $ngrokUrl = $tunnels.tunnels[0].public_url
                    Write-Output "ngrok tunnel is available at: $ngrokUrl"
                    break
                }
            } catch {
                Write-Output "Waiting for ngrok to initialize..."
                Start-Sleep -Seconds 5
            }
        }

        if (-not $ngrokUrl) {
            Stop-Process -Id $ngrokProcess.Id
            throw "Failed to create ngrok tunnel"
        }

        # Loop to keep the script running and monitor ngrok process
        while ($true) {
            if (-not (Get-Process -Id $ngrokProcess.Id -ErrorAction SilentlyContinue)) {
                Write-Output "ngrok process has stopped, restarting..."
                $ngrokProcess = Start-Process .\ngrok.exe -ArgumentList "tcp 3389" -PassThru
            }
            Start-Sleep -Seconds 300
        }
        '@

        Set-Content -Path start-ngrok.ps1 -Value $ngrokScript

    - name: Run start-ngrok.ps1 script
      run: |
        Start-Process -FilePath pwsh -ArgumentList '-File ./start-ngrok.ps1' -NoNewWindow
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
