name: CI

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive -Path ngrok.zip -DestinationPath ./

    - name: Authenticate with ngrok
      run: .\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
        if (-not $Env:RUNNERADMIN_PASSWORD) {
            throw "RUNNERADMIN_PASSWORD is not set"
        }
        
        $securePassword = ConvertTo-SecureString -AsPlainText $Env:RUNNERADMIN_PASSWORD -Force
        
        if (Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue) {
            Set-LocalUser -Name "runneradmin" -Password $securePassword
        } else {
            New-LocalUser -Name "runneradmin" -Password $securePassword -UserMayNotChangePassword -PasswordNeverExpires -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "runneradmin"
        }
      env:
        RUNNERADMIN_PASSWORD: ${{ secrets.RUNNERADMIN_PASSWORD }}

    - name: Download and install WinRAR
      run: |
        Invoke-WebRequest -Uri "https://www.win-rar.com/fileadmin/winrar-versions/winrar/winrar-x64-601.exe" -OutFile winrar-x64-601.exe
        Start-Process -FilePath .\winrar-x64-601.exe -ArgumentList "/S" -Wait
        Write-Output "WinRAR installation completed."

    - name: Download Avica
      run: |
        Invoke-WebRequest -Uri "https://download.avica.link/downloader/Avica_setup.exe" -OutFile "C:\Users\runneradmin\Downloads\Avica_setup.exe"
        Write-Output "Avica downloaded to C:\Users\runneradmin\Downloads."
        
    - name: Download NetLimiter
      run: |
        Invoke-WebRequest -Uri "https://download.netlimiter.com/nl/netlimiter-5.3.13.0.exe" -OutFile "C:\Users\runneradmin\Downloads\netlimiter-5.3.13.0.exe"
        Write-Output "NetLimiter downloaded to C:\Users\runneradmin\Downloads."
        
    - name: Download IDM
      run: |
        Invoke-WebRequest -Uri "https://mirror2.internetdownloadmanager.com/idman642build10.exe?v=lt&filename=idman642build10.exe" -OutFile "C:\Users\runneradmin\Downloads\idman642build10.exe"
        Write-Output "IDM downloaded to C:\Users\runneradmin\Downloads."
        
    - name: Open File Explorer in Downloads
      run: Start-Process -FilePath explorer.exe -ArgumentList "C:\Users\runneradmin\Downloads"

    - name: Enable Chrome Remote Desktop
      run: |
        # Download and install Chrome Remote Desktop
        Invoke-WebRequest -Uri "https://dl.google.com/tag/s/appguid%3D%7B4DC8B4CA-1BDA-483E-B5FA-D3C12E15B62D%7D%26iid%3D%7BE3B9FEF1-584F-0382-D570-F91C7DFB5E59%7D%26lang%3Den%26browser%3D3%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26ap%3Dx64-stable-statsdef_0%26brand%3DGCEA/dl/chrome/install/remote_desktop/chrome_remote_desktop.msi" -OutFile chrome_remote_desktop.msi
        Start-Process -FilePath msiexec.exe -ArgumentList "/i chrome_remote_desktop.msi /quiet /qn /norestart" -Wait
        Write-Output "Chrome Remote Desktop installation completed."
        
        # Start Chrome Remote Desktop service
        Start-Service -Name chromoting

        # Wait for Chrome Remote Desktop service to start
        Start-Sleep -Seconds 30
        
        # Get access code for Chrome Remote Desktop
        $accessCode = & "C:\Program Files\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe" --pin $Env:CHROME_REMOTE_DESKTOP_PIN
        Write-Output "Chrome Remote Desktop access code: $accessCode"
      env:
        CHROME_REMOTE_DESKTOP_PIN: ${{ secrets.CHROME_REMOTE_DESKTOP_PIN }}

    - name: Create start-ngrok.ps1 script
      run: |
        $ngrokScript = @'
        # Start ngrok process
        $ngrokProcess = Start-Process .\ngrok.exe -ArgumentList "tcp 3389" -PassThru
        # Give ngrok some time to start
        Start-Sleep -Seconds 10
        # Initialize ngrok URL
        $ngrokUrl = ""
        # Try to fetch the ngrok public URL
        while ($true) {
            try {
                $tunnels = Invoke-RestMethod -Uri http://127.0.0.1:4040/api/tunnels
                if ($tunnels.tunnels) {
                    $ngrokUrl = $tunnels.tunnels[0].public_url
                    Write-Output "ngrok tunnel is available at: $ngrokUrl"
                    break
                }
            } catch {
                Write-Output "Waiting for ngrok to initialize..."
                Start-Sleep -Seconds 5
            }
        }
        if (-not $ngrokUrl) {
            Stop-Process -Id $ngrokProcess.Id
            throw "Failed to create ngrok tunnel"
        }
        # Loop to keep the script running
        while ($true) {
            Start-Sleep -Seconds 300
        }
        '@
        Set-Content -Path start-ngrok.ps1 -Value $ngrokScript

    - name: Run start-ngrok.ps1 script
      run: .\start-ngrok.ps1
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
